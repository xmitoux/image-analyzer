"""
Django settings for image_analyzer project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

if DEBUG:
    # 開発環境用の固定キー
    SECRET_KEY = "django-insecure-co$6l&u7cg5+r!t#k9h1*s4gm^h9tl4$dp1r64+a3)d%oi4ry5"
else:
    # 本番環境では必須
    SECRET_KEY = os.getenv('SECRET_KEY')
    if not SECRET_KEY:
        raise ValueError("SECRET_KEY is required in production")

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.railway.app',  # Railway domains
    '.up.railway.app',  # Railway custom domains
]

# Railway環境でのALLOWED_HOSTSの動的設定
if 'RAILWAY_ENVIRONMENT' in os.environ:
    railway_url = os.getenv('RAILWAY_PUBLIC_DOMAIN')
    if railway_url:
        ALLOWED_HOSTS.append(railway_url)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'rest_framework',
    'corsheaders',
    'api',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "image_analyzer.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "image_analyzer.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Railway環境またはDATABASE_URLが設定されている場合
if 'DATABASE_URL' in os.environ:
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(
            os.environ.get('DATABASE_URL'),
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
# Railway環境だがDATABASE_URLが設定されていない場合（デバッグ用）
elif 'RAILWAY_ENVIRONMENT' in os.environ:
    raise ValueError(
        "DATABASE_URL is required in Railway environment. "
        "Make sure PostgreSQL service is added and connected."
    )
else:
    # ローカル開発環境
    DATABASES = {
        "default": {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Railway対応
if 'RAILWAY_ENVIRONMENT' in os.environ:
    # Railway環境では静的ファイルをWhitenoiseで配信
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Google Cloud Platform 設定
GCS_BUCKET_NAME = os.getenv('GCS_BUCKET_NAME')

# Railway環境ではJSONでサービスアカウントキーを設定
if 'RAILWAY_ENVIRONMENT' in os.environ and 'GOOGLE_APPLICATION_CREDENTIALS_JSON' in os.environ:
    import json
    import tempfile

    # 環境変数からJSONを読み込み、一時ファイルに保存
    service_account_info = json.loads(
        os.getenv('GOOGLE_APPLICATION_CREDENTIALS_JSON'))

    # 一時ファイルを作成してパスを設定
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        json.dump(service_account_info, f)
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = f.name

# 最終的なGOOGLE_APPLICATION_CREDENTIALS取得（Railway環境で設定された後）
GOOGLE_APPLICATION_CREDENTIALS = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')

# 本番環境でのバリデーション
if not DEBUG and not GOOGLE_APPLICATION_CREDENTIALS:
    raise ValueError(
        "GOOGLE_APPLICATION_CREDENTIALS must be set in production")

if not DEBUG and not GCS_BUCKET_NAME:
    raise ValueError("GCS_BUCKET_NAME must be set in production")

# CORS設定
CORS_ALLOW_ALL_ORIGINS = DEBUG  # 開発環境では全てのオリジンを許可

if not DEBUG:
    # 本番環境では特定のオリジンのみ許可
    CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', '').split(',')
else:
    # 開発環境用のデフォルト設定
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://localhost:8080",
        "http://127.0.0.1:8080",
    ]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# ファイルアップロード設定
FILE_UPLOAD_MAX_MEMORY_SIZE = 20 * 1024 * 1024  # 20MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 20 * 1024 * 1024  # 20MB
FILE_UPLOAD_PERMISSIONS = 0o644

# REST Framework設定
REST_FRAMEWORK = {
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
}
